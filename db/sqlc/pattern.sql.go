// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pattern.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertPattern = `-- name: InsertPattern :one
insert into oteldemo.pattern (name, "desc", graph_data)
values ($1, $2, $3)
returning id
`

type InsertPatternParams struct {
	Name        string
	Description string
	GraphData   []byte
}

func (q *Queries) InsertPattern(ctx context.Context, arg InsertPatternParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, insertPattern, arg.Name, arg.Description, arg.GraphData)
	var id pgtype.Int4
	err := row.Scan(&id)
	return id, err
}

const selectAllPattern = `-- name: SelectAllPattern :many
select "name", "desc", graph_data from oteldemo.pattern
`

type SelectAllPatternRow struct {
	Name      string
	Desc      string
	GraphData []byte
}

func (q *Queries) SelectAllPattern(ctx context.Context) ([]SelectAllPatternRow, error) {
	rows, err := q.db.Query(ctx, selectAllPattern)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllPatternRow
	for rows.Next() {
		var i SelectAllPatternRow
		if err := rows.Scan(&i.Name, &i.Desc, &i.GraphData); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
